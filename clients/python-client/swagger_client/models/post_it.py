# coding: utf-8

"""
    Post-it digitalization API

    Post-it digitalization API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: muellerobin95@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PostIt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'contents': 'str',
        'color': 'str',
        'coordinates': 'Coordinate',
        'width': 'float',
        'height': 'float'
    }

    attribute_map = {
        'id': 'id',
        'contents': 'contents',
        'color': 'color',
        'coordinates': 'coordinates',
        'width': 'width',
        'height': 'height'
    }

    def __init__(self, id=None, contents=None, color=None, coordinates=None, width=None, height=None):  # noqa: E501
        """PostIt - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._contents = None
        self._color = None
        self._coordinates = None
        self._width = None
        self._height = None
        self.discriminator = None
        self.id = id
        self.contents = contents
        self.color = color
        self.coordinates = coordinates
        self.width = width
        self.height = height

    @property
    def id(self):
        """Gets the id of this PostIt.  # noqa: E501


        :return: The id of this PostIt.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostIt.


        :param id: The id of this PostIt.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def contents(self):
        """Gets the contents of this PostIt.  # noqa: E501


        :return: The contents of this PostIt.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this PostIt.


        :param contents: The contents of this PostIt.  # noqa: E501
        :type: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def color(self):
        """Gets the color of this PostIt.  # noqa: E501


        :return: The color of this PostIt.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PostIt.


        :param color: The color of this PostIt.  # noqa: E501
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def coordinates(self):
        """Gets the coordinates of this PostIt.  # noqa: E501


        :return: The coordinates of this PostIt.  # noqa: E501
        :rtype: Coordinate
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this PostIt.


        :param coordinates: The coordinates of this PostIt.  # noqa: E501
        :type: Coordinate
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")  # noqa: E501

        self._coordinates = coordinates

    @property
    def width(self):
        """Gets the width of this PostIt.  # noqa: E501


        :return: The width of this PostIt.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PostIt.


        :param width: The width of this PostIt.  # noqa: E501
        :type: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this PostIt.  # noqa: E501


        :return: The height of this PostIt.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PostIt.


        :param height: The height of this PostIt.  # noqa: E501
        :type: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostIt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostIt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
