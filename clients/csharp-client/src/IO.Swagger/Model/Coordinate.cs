/* 
 * Post-it digitalization API
 *
 * Post-it digitalization API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: muellerobin95@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Coordinate
    /// </summary>
    [DataContract]
        public partial class Coordinate :  IEquatable<Coordinate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coordinate" /> class.
        /// </summary>
        /// <param name="posX">posX (required).</param>
        /// <param name="posY">posY (required).</param>
        public Coordinate(double? posX = default(double?), double? posY = default(double?))
        {
            // to ensure "posX" is required (not null)
            if (posX == null)
            {
                throw new InvalidDataException("posX is a required property for Coordinate and cannot be null");
            }
            else
            {
                this.PosX = posX;
            }
            // to ensure "posY" is required (not null)
            if (posY == null)
            {
                throw new InvalidDataException("posY is a required property for Coordinate and cannot be null");
            }
            else
            {
                this.PosY = posY;
            }
        }
        
        /// <summary>
        /// Gets or Sets PosX
        /// </summary>
        [DataMember(Name="posX", EmitDefaultValue=false)]
        public double? PosX { get; set; }

        /// <summary>
        /// Gets or Sets PosY
        /// </summary>
        [DataMember(Name="posY", EmitDefaultValue=false)]
        public double? PosY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Coordinate {\n");
            sb.Append("  PosX: ").Append(PosX).Append("\n");
            sb.Append("  PosY: ").Append(PosY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Coordinate);
        }

        /// <summary>
        /// Returns true if Coordinate instances are equal
        /// </summary>
        /// <param name="input">Instance of Coordinate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Coordinate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PosX == input.PosX ||
                    (this.PosX != null &&
                    this.PosX.Equals(input.PosX))
                ) && 
                (
                    this.PosY == input.PosY ||
                    (this.PosY != null &&
                    this.PosY.Equals(input.PosY))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PosX != null)
                    hashCode = hashCode * 59 + this.PosX.GetHashCode();
                if (this.PosY != null)
                    hashCode = hashCode * 59 + this.PosY.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
