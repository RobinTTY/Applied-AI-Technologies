# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.coordinate import Coordinate  # noqa: F401,E501
from swagger_server import util


class PostIt(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, contents: str=None, color: str=None, coordinates: Coordinate=None, width: float=None, height: float=None):  # noqa: E501
        """PostIt - a model defined in Swagger

        :param id: The id of this PostIt.  # noqa: E501
        :type id: str
        :param contents: The contents of this PostIt.  # noqa: E501
        :type contents: str
        :param color: The color of this PostIt.  # noqa: E501
        :type color: str
        :param coordinates: The coordinates of this PostIt.  # noqa: E501
        :type coordinates: Coordinate
        :param width: The width of this PostIt.  # noqa: E501
        :type width: float
        :param height: The height of this PostIt.  # noqa: E501
        :type height: float
        """
        self.swagger_types = {
            'id': str,
            'contents': str,
            'color': str,
            'coordinates': Coordinate,
            'width': float,
            'height': float
        }

        self.attribute_map = {
            'id': 'id',
            'contents': 'contents',
            'color': 'color',
            'coordinates': 'coordinates',
            'width': 'width',
            'height': 'height'
        }
        self._id = id
        self._contents = contents
        self._color = color
        self._coordinates = coordinates
        self._width = width
        self._height = height

    @classmethod
    def from_dict(cls, dikt) -> 'PostIt':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PostIt of this PostIt.  # noqa: E501
        :rtype: PostIt
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PostIt.


        :return: The id of this PostIt.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PostIt.


        :param id: The id of this PostIt.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def contents(self) -> str:
        """Gets the contents of this PostIt.


        :return: The contents of this PostIt.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents: str):
        """Sets the contents of this PostIt.


        :param contents: The contents of this PostIt.
        :type contents: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def color(self) -> str:
        """Gets the color of this PostIt.


        :return: The color of this PostIt.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this PostIt.


        :param color: The color of this PostIt.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def coordinates(self) -> Coordinate:
        """Gets the coordinates of this PostIt.


        :return: The coordinates of this PostIt.
        :rtype: Coordinate
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: Coordinate):
        """Sets the coordinates of this PostIt.


        :param coordinates: The coordinates of this PostIt.
        :type coordinates: Coordinate
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")  # noqa: E501

        self._coordinates = coordinates

    @property
    def width(self) -> float:
        """Gets the width of this PostIt.


        :return: The width of this PostIt.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width: float):
        """Sets the width of this PostIt.


        :param width: The width of this PostIt.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def height(self) -> float:
        """Gets the height of this PostIt.


        :return: The height of this PostIt.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height: float):
        """Sets the height of this PostIt.


        :param height: The height of this PostIt.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height
